@model Product

@{
    ViewData["Title"] = Model.Name;
}

<div class="container py-4">
    <div class="row align-items-start">
        <!-- Cake Image -->
        <div class="col-lg-6 mb-4">
            <img src="@Model.ImageUrl" class="img-fluid rounded-3 shadow-sm w-100" alt="@Model.Name">
        </div>

        <!-- Cake Info -->
        <div class="col-lg-6">
            <h2 class="mb-3 text-danger fw-bold">@Model.Name</h2>
            <p class="lead text-muted">@Model.Description</p>

            <!-- Recipe Info -->
            <div class="mt-4">
                <h5 class="fw-semibold mb-2">🍽️ Recipe Details</h5>
                <ul class="list-unstyled small">
                    <li><strong>Yield:</strong> @Model.Recipe.YieldQuantity @Model.Recipe.YieldUnit</li>
                    <li><strong>Preparation Time:</strong> @Model.Recipe.PreparationTime minutes</li>
                </ul>
            </div>

            <!-- Ingredients -->
            <div class="mt-4">
                <h5 class="fw-semibold mb-2">🧂 Ingredients</h5>
                <div class="table-responsive">
                    <table class="table table-bordered text-center align-middle">
                        <thead class="table-danger text-white">
                            <tr>
                                <th>Ingredient</th>
                                <th>Required</th>
                                <th>Available</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ri in Model.Recipe.RecipeIngredients)
                            {
                                var status = ri.Ingredient.CurrentStock >= ri.Quantity ? "Sufficient" : "Insufficient";
                                <tr>
                                    <td>@ri.Ingredient.Name</td>
                                    <td>@ri.Quantity @ri.Ingredient.UnitOfMeasure</td>
                                    <td>@ri.Ingredient.CurrentStock @ri.Ingredient.UnitOfMeasure</td>
                                    <td class="fw-bold @(status == "Sufficient" ? "text-success" : "text-danger")">@status</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Production Calculator -->
            <div class="mt-4">
                <h5 class="fw-semibold">🧮 Production Calculator</h5>
                <form id="productionForm" class="row g-3">
                    <div class="col-12">
                        <label for="desiredQuantity" class="form-label">Desired Quantity (@Model.Recipe.YieldUnit):</label>
                        <input type="number" class="form-control" id="desiredQuantity" min="1" value="@Model.Recipe.YieldQuantity">
                    </div>
                    <div class="col-12 text-end">
                        <button type="button" class="btn btn-outline-primary mt-2" onclick="calculateRequirements()">
                            Calculate Requirements
                        </button>
                    </div>
                </form>

                <div id="calculationResults" class="mt-4"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function calculateRequirements() {
            const desiredQ = document.getElementById('desiredQuantity').value;
            const desiredQuantity = parseFloat(desiredQ);
            const recipeId = @Model.Recipe.RecipeId;

            fetch(`/Production/CalculateRequirements?recipeId=${recipeId}&desiredQuantity=${desiredQuantity}`)
                .then(response => response.json())
                .then(data => {
                    let html = `<h5 class="mt-4">📦 Required Ingredients</h5>
                                <div class="table-responsive"><table class="table table-bordered"><thead>
                                <tr><th>Ingredient</th><th>Required</th><th>Available</th><th>Status</th></tr></thead><tbody>`;

                    data.forEach(item => {
                        html += `<tr>
                            <td>${item.ingredientName}</td>
                            <td>${item.requiredAmount} ${item.unit}</td>
                            <td>${item.availableStock} ${item.unit}</td>
                            <td class="${item.status === 'Sufficient' ? 'text-success fw-bold' : 'text-danger fw-bold'}">
                                ${item.status}
                            </td>
                        </tr>`;
                    });

                    html += `</tbody></table></div>
                             <div class="text-end mt-3">
                                <button class="btn btn-success" onclick="confirmProduction()">
                                    ✅ Confirm Production
                                </button>
                             </div>`;

                    document.getElementById('calculationResults').innerHTML = html;
                });
        }

        function confirmProduction() {
            const desiredQuantity = document.getElementById('desiredQuantity').value;
            const recipeId = @Model.Recipe.RecipeId;

            const request = {
                recipeId: recipeId,
                desiredQuantity: parseFloat(desiredQuantity),
                notes: "Regular production batch"
            };

            fetch('/Production/ConfirmProduction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(request)
            })
            .then(response => {
                if (!response.ok) return response.json().then(err => { throw err; });
                return response.json();
            })
            .then(data => {
                alert("Production confirmed successfully!");
                window.location.reload(true);
            })
            .catch(error => {
                console.error('Error:', error);
                alert(`❌ Failed to confirm production: ${error.message}`);
            });
        }
    </script>
}
